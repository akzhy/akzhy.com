$themes: (
    light: (
        background: #fff,
        invert: #0e071b,
        overlay: #d6cfcf,
        backgroundSecondary: #efebe9,
        textPrimary: #343959,
        textDefault: #444,
        secondary: #aed581,
        primary: #4fc3f7,
        error: #ff5722,
        success: #388e3c
    ),
    dark: (
        background: #0f0d15,
        invert: #fff,
        overlay: #2f283d,
        backgroundSecondary: #070113,
        textPrimary: #fff,
        textDefault: #e0e0e0,
        secondary: #F44336,
        primary: #9C27B0,
        error: #ff5722,
        success: #8bc34a
    ),
);

// Internal variable, just ignore 
$_current-theme: null;

// Function to refer to theme setting by name
// 
// @param string $name  Name of the theme setting to use
// @return mixed
@function theme($name) {
    @if ($_current-theme == null) {
        @error "theme() function should only be used into code that is wrapped by 'theme' mixin";
    }
    @if (not map-has-key(map-get($themes, $_current-theme), $name)) {
        @warn "Unknown theme key '#{$name}' for theme '#{$_current-theme}'";
        @return null;
    }
    @return map-get(map-get($themes, $_current-theme), $name);
}

// Theming application mixin, themable piece of style should be wrapped by call to this mixin 
@mixin theme() {
    @each $theme in map-keys($themes) {
        $_current-theme: $theme !global;
        .theme-#{$theme} & {
            @content;
        }
    }
    $_current-theme: null !global;
}
